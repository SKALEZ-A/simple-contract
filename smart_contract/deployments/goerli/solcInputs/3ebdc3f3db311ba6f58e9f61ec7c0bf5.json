{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Using ChainLink VFR \n// Floating point math in solidity\npragma solidity 0.8.7;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    address public /* immutable */ i_owner;\n\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 50 * 10^18;\n\n    // to keep track of the people that sent mkney to the contract \n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n    modifier onlyOwner() {\n        // require(i_owner == msg.sender, \"Sender is not owner\");\n        if(msg.sender != i_owner){revert NotOwner();}   // another way to reduce gas.\n        _;\n    }\n\n    function fund() public payable {\n        // require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didnt send enough ether\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n    function getBalance() public view returns(uint){\n        return address(this).balance;\n    }\n\n    function withdraw() public onlyOwner {\n        // looping through all addresses \n        for (uint funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        // resetting the array\n        funders = new address[](0);\n\n        // withdrawing the funds \n        // payable(msg.sender).transfer(address(this).balance);     // transfer \n\n        // //send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);    // send\n        // require(sendSuccess, \"Send failed\");\n\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");    \n    }\n\n    // what happens if ETH is sent to the smart contract without calling the fund() (receive and fallback)\n    receive() external payable {\n        fund();\n    }\n    fallback() external payable {\n        fund();\n    }\n\n    \n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\nlibrary PriceConverter {\n        // function to get the price of the native token\n    function getPrice() internal view returns (uint256) {\n        // ABI \n        // Goerli ETH/USD address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        //price of eth in terms of USD \n        return uint256(price * 1e10);\n    }\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        return priceFeed.version();\n    }\n\n    // convert eth price to usd\n    // function getConversionRate(uint256 ethAmount) internal view returns (uint256) {\n    //     uint256 ethPrice = getPrice();\n    //     uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    //     return ethAmountInUsd;\n    // }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}