{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Using ChainLink VFR\n// Floating point math in solidity\npragma solidity 0.8.7;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n\taddress private immutable i_owner;\n\n\tusing PriceConverter for uint256;\n\n\tuint256 public constant MINIMUM_USD = (50 * 10) ^ 18;\n\n\t// to keep track of the people that sent mkney to the contract\n\taddress[] public funders;\n\tmapping(address => uint256) private s_addressToAmountFunded;\n\n\tAggregatorV3Interface private s_priceFeed;\n\n\tconstructor(address priceFeedAddress) {\n\t\ti_owner = msg.sender;\n\t\ts_priceFeed = AggregatorV3Interface(priceFeedAddress);\n\t}\n\n\tmodifier onlyOwner() {\n\t\t// require(i_owner == msg.sender, \"Sender is not owner\");\n\t\tif (msg.sender != i_owner) {\n\t\t\trevert NotOwner();\n\t\t} // another way to reduce gas.\n\t\t_;\n\t}\n\n\t// function to allow anyone send ether to the contract without calling the fund function\n\treceive() external payable {\n\t\tfund();\n\t}\n\n\tfallback() external payable {\n\t\tfund();\n\t}\n\n\tfunction fund() public payable {\n\t\t// require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didnt send enough ether\");\n\t\tfunders.push(msg.sender);\n\t\ts_addressToAmountFunded[msg.sender] = msg.value;\n\t}\n\n\tfunction getBalance() public view returns (uint) {\n\t\treturn address(this).balance;\n\t}\n\n\tfunction withdraw() public onlyOwner {\n\t\t// looping through all addresses\n\t\tfor (uint funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n\t\t\taddress funder = funders[funderIndex];\n\t\t\ts_addressToAmountFunded[funder] = 0;\n\t\t}\n\n\t\t// resetting the array\n\t\tfunders = new address[](0);\n\n\t\t// withdrawing the funds\n\t\t// payable(msg.sender).transfer(address(this).balance);     // transfer\n\n\t\t// //send\n\t\t// bool sendSuccess = payable(msg.sender).send(address(this).balance);    // send\n\t\t// require(sendSuccess, \"Send failed\");\n\n\t\t//call\n\t\t(bool callSuccess, ) = payable(msg.sender).call{\n\t\t\tvalue: address(this).balance\n\t\t}(\"\");\n\t\trequire(callSuccess, \"Call failed\");\n\t}\n\n\tfunction getOwner() public view returns (address) {\n\t\treturn i_owner;\n\t}\n\n\tfunction getAddressToAmountFunded(\n\t\taddress fundingAddress\n\t) public view returns (uint256) {\n\t\treturn s_addressToAmountFunded[fundingAddress];\n\t}\n\n\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\n\t\treturn s_priceFeed;\n\t}\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\nlibrary PriceConverter {\n        // function to get the price of the native token\n    function getPrice() internal view returns (uint256) {\n        // ABI \n        // Goerli ETH/USD address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        //price of eth in terms of USD \n        return uint256(price * 1e10);\n    }\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        return priceFeed.version();\n    }\n\n    // convert eth price to usd\n    // function getConversionRate(uint256 ethAmount) internal view returns (uint256) {\n    //     uint256 ethPrice = getPrice();\n    //     uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    //     return ethAmountInUsd;\n    // }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}